
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/generated/1_linear_regression.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_generated_1_linear_regression.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_generated_1_linear_regression.py:


1 - Linear regression
=====================

.. GENERATED FROM PYTHON SOURCE LINES 9-14

|Open In Colab|

.. |Open In Colab| image:: https://img.shields.io/badge/open%20in-Colab-b5e2fa?logo=googlecolab&style=flat-square&color=ffd670
   :target: https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/tutorials/1_linear_regression.ipynb


.. GENERATED FROM PYTHON SOURCE LINES 17-42

--------------

What we do in this notebook
---------------------------

Here we demonstrate use of CoFI on a simple **linear regression**
problem, where we fit a polynomial function to data, using three
different algorithms:

-  by solution of a linear system of equations,
-  by optimization of a data misfit function
-  by Bayesian sampling of a Likelihood multiplied by a prior.

--------------

Learning outcomes
-----------------

-  A demonstration of running CoFI for a class of parameter fitting
   problem. Example of a CoFI **template**.
-  A demonstration of how CoFI may be used to **experiment with
   different inference approaches** under a common interface.
-  A demonstration of CoFI’s **expandability** in that it may be used
   with pre-set, or user defined, misfits, likelihood or priors.


.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: default


    # Environment setup (uncomment code below)

    # !pip install -U cofi








.. GENERATED FROM PYTHON SOURCE LINES 52-57

Linear regression
-----------------

Lets start with some (x,y) data.


.. GENERATED FROM PYTHON SOURCE LINES 57-61

.. code-block:: default


    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 63-82

.. code-block:: default


    # here is some (x,y) data
    data_x = np.array([1.1530612244897958, -0.07142857142857162, -1.7857142857142858, 
                    1.6428571428571423, -2.642857142857143, -1.0510204081632653, 
                    1.1530612244897958, -1.295918367346939, -0.806122448979592, 
                    -2.2755102040816326, -2.2755102040816326, -0.6836734693877551, 
                    0.7857142857142856, 1.2755102040816322, -0.6836734693877551, 
                    -3.2551020408163267, -0.9285714285714288, -3.377551020408163, 
                    -0.6836734693877551, 1.7653061224489797])

    data_y = np.array([-7.550931153863841, -6.060810406314714, 3.080063056254076, 
                    -4.499764131508964, 2.9462042659962333, -0.4645899453212615, 
                    -7.43068837808917, 1.6273774547833582, -0.05922697815443567, 
                    3.8462283231266903, 3.425851020301113, -0.05359797104829345, 
                    -10.235538857712598, -5.929113775071286, -1.1871766078924957, 
                    -4.124258811692425, 0.6969191559961637, -4.454022624935177, 
                    -2.352842192972056, -4.25145590011172])
    sigma = 1   # estimation on the data noise








.. GENERATED FROM PYTHON SOURCE LINES 87-89

And now lets plot the data.


.. GENERATED FROM PYTHON SOURCE LINES 89-97

.. code-block:: default


    def plot_data(sigma=None):
        if(sigma is None):
            plt.scatter(data_x, data_y, color="lightcoral", label="observed data")
        else:
            plt.errorbar(data_x, data_y, yerr=sigma, fmt='.',color="lightcoral",ecolor='lightgrey',ms=10)
    plot_data()




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_001.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-139

Problem description
-------------------

To begin with, we will work with polynomial curves,

.. math:: y(x) = \sum_{j=0}^M m_j x^j\,.

Here, :math:`M` is the ‘order’ of the polynomial: if :math:`M=1` we have
a straight line with 2 parameters, if :math:`M=2` it will be a quadratic
with 3 parameters, and so on. The :math:`m_j, (j=0,\dots M)` are the
‘model coefficients’ that we seek to constrain from the data.

For this class of problem the forward operator takes the following form:

.. math:: \left(\begin{array}{c}y_0\\y_1\\\vdots\\y_N\end{array}\right) = \left(\begin{array}{ccc}1&x_0&x_0^2&x_0^3\\1&x_1&x_1^2&x_1^3\\\vdots&\vdots&\vdots\\1&x_N&x_N^2&x_N^3\end{array}\right)\left(\begin{array}{c}m_0\\m_1\\m_2\\m_3\end{array}\right)

This clearly has the required general form,
:math:`\mathbf{d} =G{\mathbf m}`.

where:

-  :math:`\textbf{d}` is the vector of data values,
   (:math:`y_0,y_1,\dots,y_N`);
-  :math:`\textbf{m}` is the vector of model parameters,
   (:math:`m_0,m_1,m_2`);
-  :math:`G` is the basis matrix (or design matrix) of this linear
   regression problem (also called the **Jacobian** matrix for this
   linear problem).

We have a set of noisy data values, :math:`y_i (i=0,\dots,N)`, measured
at known locations, :math:`x_i (i=0,\dots,N)`, and wish to find the best
fit degree 3 polynomial.

The function that generated our data is : :math:`y=-6-5x+2x^2+x^3`, and
we have added Gaussian random noise, :math:`{\cal N}(0,\sigma^2)`, with
:math:`\sigma=1.0`.


.. GENERATED FROM PYTHON SOURCE LINES 142-145

We now build the Jacobian/G matrix for this problem and define a forward
function which simply multiplies :math:`\mathbf m` by :math:`G`.


.. GENERATED FROM PYTHON SOURCE LINES 145-157

.. code-block:: default


    nparams = 4 # Number of model parameters to be solved for

    def jacobian(x=data_x, n=nparams):
        return np.array([x**i for i in range(n)]).T

    def forward(model):
        return jacobian().dot(model)

    def Cd_inv(sigma=sigma, ndata=len(data_x)):
        return 1/sigma**2 * np.identity(ndata)








.. GENERATED FROM PYTHON SOURCE LINES 162-164

Define the true model for later.


.. GENERATED FROM PYTHON SOURCE LINES 164-171

.. code-block:: default


    # True model for plotting
    x = np.linspace(-3.5,2.5)              # x values to plot
    true_model = np.array([-6, -5, 2, 1])  # we know it for this case which will be useful later for comparison.

    true_y = jacobian(x,4).dot(true_model) # y values for true curve








.. GENERATED FROM PYTHON SOURCE LINES 176-179

Now lets plot the data with the curve from the true polynomial
coefficients.


.. GENERATED FROM PYTHON SOURCE LINES 179-199

.. code-block:: default


    # Some plotting utilities
    def plot_model(x,y, label, color=None):
        #x = np.linspace(-3.5,2.5)
        #y = jacobian(x).dot(model)
        plt.plot(x, y, color=color or "green", label=label)
        plt.xlabel("X")
        plt.ylabel("Y")
        plt.legend()

    def plot_models(models, label="Posterior samples", color="seagreen", alpha=0.1):
        x = np.linspace(-3.5,2.5)
        G = jacobian(x)
        plt.plot(x, G.dot(models[0]), color=color, label=label, alpha=alpha)
        for m in models:
            plt.plot(x, G.dot(m), color=color, alpha=alpha)
        plt.xlabel("X")
        plt.ylabel("Y")
        plt.legend()








.. GENERATED FROM PYTHON SOURCE LINES 201-205

.. code-block:: default


    plot_data(sigma=sigma)
    plot_model(x,true_y, "true model")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_002.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 210-213

Now we have the data and the forward model we can start to try and
estimate the coefficients of the polynomial from the data.


.. GENERATED FROM PYTHON SOURCE LINES 216-257

The structure of CoFI 
----------------------

In the workflow of ``cofi``, there are three main components:
``BaseProblem``, ``InversionOptions``, and ``Inversion``.

-  ``BaseProblem`` defines the inverse problem including any user
   supplied quantities such as data vector, number of model parameters
   and measure of fit between model predictions and data.
   ``python     inv_problem = BaseProblem()     inv_problem.set_objective(some_function_here)     inv_problem.set_jacobian(some_function_here)     inv_problem.set_initial_model(a_starting_point) # if needed, e.g. we are solving a nonlinear problem by optimization``

    

-  ``InversionOptions`` describes details about how one wants to run the
   inversion, including the backend tool and solver-specific parameters.
   It is based on the concept of a ``method`` and ``tool``.

   .. code:: python

      inv_options = InversionOptions()
      inv_options.suggest_solving_methods()
      inv_options.set_solving_method("matrix solvers")
      inv_options.suggest_tools()
      inv_options.set_tool("scipy.linalg.lstsq")
      inv_options.summary()

    

-  ``Inversion`` can be seen as an inversion engine that takes in the
   above two as information, and will produce an ``InversionResult``
   upon running.

   .. code:: python

      inv = Inversion(inv_problem, inv_options)
      result = inv.run()

Internally CoFI decides the nature of the problem from the quantities
set by the user and performs internal checks to ensure it has all that
it needs to solve a problem.


.. GENERATED FROM PYTHON SOURCE LINES 260-263

1. Linear system solver
-----------------------


.. GENERATED FROM PYTHON SOURCE LINES 263-266

.. code-block:: default


    from cofi import BaseProblem, InversionOptions, Inversion








.. GENERATED FROM PYTHON SOURCE LINES 271-274

Step 1. Define CoFI ``BaseProblem``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 274-280

.. code-block:: default


    inv_problem = BaseProblem()
    inv_problem.set_data(data_y)
    inv_problem.set_jacobian(jacobian())
    inv_problem.set_data_covariance_inv(Cd_inv())








.. GENERATED FROM PYTHON SOURCE LINES 285-288

Step 2. Define CoFI ``InversionOptions``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 288-291

.. code-block:: default


    inv_options = InversionOptions()








.. GENERATED FROM PYTHON SOURCE LINES 296-299

Using the information supplied, we can ask CoFI to suggest some solving
methods.


.. GENERATED FROM PYTHON SOURCE LINES 299-302

.. code-block:: default


    inv_options.suggest_solving_methods()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The following solving methods are supported:
    {'optimization', 'matrix solvers', 'sampling'}

    Use `suggest_tools()` to see a full list of backend tools for each method




.. GENERATED FROM PYTHON SOURCE LINES 307-309

We can ask CoFI to suggest some specific software tools as well.


.. GENERATED FROM PYTHON SOURCE LINES 309-312

.. code-block:: default


    inv_options.suggest_tools()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Here's a complete list of inversion solvers supported by CoFI (grouped by methods):
    {
        "optimization": [
            "scipy.optimize.minimize",
            "scipy.optimize.least_squares",
            "torch.optim"
        ],
        "matrix solvers": [
            "scipy.linalg.lstsq",
            "cofi.simple_newton"
        ],
        "sampling": [
            "emcee"
        ]
    }




.. GENERATED FROM PYTHON SOURCE LINES 314-318

.. code-block:: default


    inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
    inv_options.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: matrix solvers
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `scipy.linalg.lstsq (by default)` - SciPy's wrapper function over LAPACK's linear least-squares solver, using 'gelsd', 'gelsy' (default), or 'gelss' as backend driver
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html', 'https://www.netlib.org/lapack/lug/node27.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: None set
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 320-324

.. code-block:: default


    # below is optional, as this has already been the default tool under "linear least square"
    inv_options.set_tool("scipy.linalg.lstsq")








.. GENERATED FROM PYTHON SOURCE LINES 329-347

Step 3. Define CoFI ``Inversion`` and run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our choices so far have defined a linear parameter estimation problem
(without any regularization) to be solved within a least squares
framework. In this case the selection of a ``matrix solvers`` method
will mean we are calculating the standard least squares solution

.. math::


   m = (G^T C_d^{-1} G)^{-1} G^T C_d^{-1} d

and our choice of backend tool ``scipy.linalg.lstsq``, means that we
will employ scipy’s ``linalg`` package to perform the numerics.

Lets run CoFI.


.. GENERATED FROM PYTHON SOURCE LINES 347-351

.. code-block:: default


    inv = Inversion(inv_problem, inv_options)
    inv_result = inv.run()








.. GENERATED FROM PYTHON SOURCE LINES 353-357

.. code-block:: default


    print(f"The inversion result from `scipy.linalg.lstsq`: {inv_result.model}\n")
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The inversion result from `scipy.linalg.lstsq`: [-5.71964359 -5.10903808  1.82553662  0.97472374]

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    model: [-5.71964359 -5.10903808  1.82553662  0.97472374]
    sum_of_squared_residuals: []
    effective_rank: 4
    singular_values: [3765.51775745   69.19268194   16.27124488    3.85437889]
    model_covariance: [[ 0.19027447  0.05812534 -0.08168411 -0.02550866]
     [ 0.05812534  0.08673796 -0.03312809 -0.01812686]
     [-0.08168411 -0.03312809  0.05184851  0.01704165]
     [-0.02550866 -0.01812686  0.01704165  0.00676031]]




.. GENERATED FROM PYTHON SOURCE LINES 362-364

Lets plot the solution.


.. GENERATED FROM PYTHON SOURCE LINES 364-369

.. code-block:: default


    plot_data()
    plot_model(x,jacobian(x).dot(inv_result.model), "linear system solver", color="seagreen")
    plot_model(x,true_y, "true model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_003.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 374-399

2. Optimizer
------------

The same overdetermined linear problem,
:math:`\textbf{d} = G\textbf{m}`, with Gaussian data noise can also be
solved by minimising the squares of the residual of the linear
equations, e.g. :math:`\textbf{r}^T \textbf{C}_d^{-1}\textbf{r}` where
:math:`\textbf{r}=\textbf{d}-G\textbf{m}`. The above matrix solver
solution gives us the best data fitting model, but a direct optimisation
approach could also be used, say when the number of unknowns is large
and we do not wish, or are unable to provide the Jacobian function.

So we use a plain optimizer ``scipy.optimize.minimize`` to demonstrate
this ability.

.. raw:: html

   <!-- For this backend solver to run successfully, some additional information should be provided, otherwise
   you'll see an error to notify what additional information is required by the solver.

   There are several ways to provide the information needed to solve an inverse problem with 
   CoFI. In the example below we provide functions to calculate the data and the optional 
   regularisation. CoFI then generates the objective function for us based on the information 
   provided. The alternative to this would be to directly provide objective function to CoFI. -->


.. GENERATED FROM PYTHON SOURCE LINES 399-421

.. code-block:: default


    ######## CoFI BaseProblem - provide additional information
    inv_problem.set_initial_model(np.ones(nparams))
    inv_problem.set_forward(forward)
    inv_problem.set_data_misfit("squared error")

    # inv_problem.set_objective(your_own_misfit_function)    # (optionally) if you'd like to define your own misfit
    # inv_problem.set_gradient(your_own_gradient_of_misfit_function)    # (optionally) if you'd like to define your own misfit gradient

    ######## CoFI InversionOptions - set a different tool
    inv_options_2 = InversionOptions()
    inv_options_2.set_tool("scipy.optimize.minimize")
    inv_options_2.set_params(method="Nelder-Mead")

    ######## CoFI Inversion - run it
    inv_2 = Inversion(inv_problem, inv_options_2)
    inv_result_2 = inv_2.run()

    ######## CoFI InversionResult - check result
    print(f"The inversion result from `scipy.optimize.minimize`: {inv_result_2.model}\n")
    inv_result_2.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The inversion result from `scipy.optimize.minimize`: [-5.71967431 -5.10913992  1.82556456  0.9747426 ]

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    fun: 14.961508008942795
    nit: 193
    nfev: 330
    status: 0
    message: Optimization terminated successfully.
    final_simplex: (array([[-5.71967431, -5.10913992,  1.82556456,  0.9747426 ],
           [-5.71958302, -5.10907158,  1.8255083 ,  0.97472628],
           [-5.71969118, -5.10911404,  1.82556388,  0.97474474],
           [-5.7197282 , -5.10917942,  1.82554925,  0.97474097],
           [-5.71960767, -5.10913354,  1.82551338,  0.97473478]]), array([14.96150801, 14.96150804, 14.96150805, 14.9615082 , 14.96150821]))
    model: [-5.71967431 -5.10913992  1.82556456  0.9747426 ]




.. GENERATED FROM PYTHON SOURCE LINES 423-428

.. code-block:: default


    plot_data()
    plot_model(x,jacobian(x).dot(inv_result_2.model), "optimization solution", color="cornflowerblue")
    plot_model(x,true_y, "true model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_004.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 433-435

--------------


.. GENERATED FROM PYTHON SOURCE LINES 438-467

Challenge: Change the polynomial degree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Try and replace the 3rd order polynomial with a 1st order polynomial
(i.e. :math:`M=1`) by adding the required commands below. What does the
plot looks like?

|Upload to Jamboard 1|

Start from code below:

::

   inv_problem = BaseProblem()
   inv_problem.set_data(data_y)
   inv_problem.set_jacobian(jacobian(n=<CHANGE ME>))
   inv_problem.set_data_covariance_inv(Cd_inv())
   inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
   inv = Inversion(inv_problem, inv_options)
   inv_result = inv.run()

   print("Inferred curve with n = <CHANGE ME> ")
   plot_data()
   plot_model(x,jacobian(x,n=<CHANGE ME>).dot(inv_result.model), "optimization solution", color="cornflowerblue")
   plot_model(x,true_y, "true model", color="darkorange")

.. |Upload to Jamboard 1| image:: https://img.shields.io/badge/Click%20&%20upload%20your%20results%20to-Jamboard-lightgrey?logo=jamboard&style=for-the-badge&color=fcbf49&labelColor=edede9
   :target: https://jamboard.google.com/d/1Fu_vIhWIlDl-gs9gzSPBNXLjzj2CsS70fLMDN8-7Sew/edit?usp=sharing


.. GENERATED FROM PYTHON SOURCE LINES 467-472

.. code-block:: default


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 474-490

.. code-block:: default


    #@title Solution

    inv_problem = BaseProblem()
    inv_problem.set_data(data_y)
    inv_problem.set_jacobian(jacobian(n=2))
    inv_problem.set_data_covariance_inv(Cd_inv())
    inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
    inv = Inversion(inv_problem, inv_options)
    inv_result = inv.run()

    print("Inferred curve with n = 2 ")
    plot_data()
    plot_model(x,jacobian(x,n=2).dot(inv_result.model), "optimization solution", color="cornflowerblue")
    plot_model(x,true_y, "true model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_005.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Inferred curve with n = 2 




.. GENERATED FROM PYTHON SOURCE LINES 495-497

--------------


.. GENERATED FROM PYTHON SOURCE LINES 500-503

3. Bayesian sampling
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 506-529

Likelihood
~~~~~~~~~~

Since data errors follow a Gaussian in this example, we can define a
Likelihood function, :math:`p({\mathbf d}_{obs}| {\mathbf m})`.

.. math::


   p({\mathbf d}_{obs} | {\mathbf m}) \propto \exp \left\{- \frac{1}{2} ({\mathbf d}_{obs}-{\mathbf d}_{pred}({\mathbf m}))^T C_D^{-1} ({\mathbf d}_{obs}-{\mathbf d}_{pred}({\mathbf m})) \right\}

where :math:`{\mathbf d}_{obs}` represents the observed y values and
:math:`{\mathbf d}_{pred}({\mathbf m})` are those predicted by the
polynomial model :math:`({\mathbf m})`. The Likelihood is defined as the
probability of observing the data actually observed, given a model. In
practice we usually only need to evaluate the log of the Likelihood,
:math:`\log p({\mathbf d}_{obs} | {\mathbf m})`. To do so, we require
the inverse data covariance matrix describing the statistics of the
noise in the data, :math:`C_D^{-1}` . For this problem the data errors
are independent with identical standard deviation in noise for each
datum. Hence :math:`C_D^{-1} = \frac{1}{\sigma^2}I` where
:math:`\sigma=1`.


.. GENERATED FROM PYTHON SOURCE LINES 529-538

.. code-block:: default


    sigma = 1.0                                     # common noise standard deviation
    Cdinv = np.eye(len(data_y))/(sigma**2)      # inverse data covariance matrix

    def log_likelihood(model):
        y_synthetics = forward(model)
        residual = data_y - y_synthetics
        return -0.5 * residual @ (Cdinv @ residual).T








.. GENERATED FROM PYTHON SOURCE LINES 543-546

Note that the user could specify **any appropriate Likelihood function**
of their choosing here.


.. GENERATED FROM PYTHON SOURCE LINES 549-573

Prior
~~~~~

Bayesian sampling requires a prior probability density function. A
common problem with polynomial coefficients as model parameters is that
it is not at all obvious what a prior should be. Here we choose a
uniform prior with specified bounds

.. math::


   \begin{align}
   p({\mathbf m}) &= \frac{1}{V},\quad  l_i \le m_i \le u_i, \quad (i=1,\dots,M)\\
   \\
            &= 0, \quad {\rm otherwise},
   \end{align}

where :math:`l_i` and :math:`u_i` are lower and upper bounds on the
:math:`i`\ th model coefficient.

Here use the uniform distribution with
:math:`{\mathbf l}^T = (-10.,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (10.,10.,10.,10.)`.


.. GENERATED FROM PYTHON SOURCE LINES 573-582

.. code-block:: default


    m_lower_bound = np.ones(nparams) * (-10.)             # lower bound for uniform prior
    m_upper_bound = np.ones(nparams) * 10                 # upper bound for uniform prior

    def log_prior(model):    # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)








.. GENERATED FROM PYTHON SOURCE LINES 587-590

Note that the user could specify **any appropriate Prior PDF** of their
choosing here.


.. GENERATED FROM PYTHON SOURCE LINES 593-614

Bayesian sampling
~~~~~~~~~~~~~~~~~

In this aproach we sample a probability distribution rather than find a
single best fit solution. Bayes’ theorem tells us the the posterior
distribution is proportional to the Likelihood and the prior.

.. math:: p(\mathbf{m}|\mathbf{d}) = K p(\mathbf{d}|\mathbf{m})p(\mathbf{m})

where :math:`K` is some constant. Under the assumptions specified
:math:`p(\mathbf{m}|\mathbf{d})` gives a probability density of models
that are supported by the data. We seek to draw random samples from
:math:`p(\mathbf{m}|\mathbf{d})` over model space and then to make
inferences from the resulting ensemble of model parameters.

In this example we make use of *The Affine Invariant Markov chain Monte
Carlo (MCMC) Ensemble sampler* `Goodman and Weare
2010 <https://msp.org/camcos/2010/5-1/p04.xhtml>`__ to sample the
posterior distribution of the model. (See more details about
`emcee <https://emcee.readthedocs.io/en/stable/>`__).


.. GENERATED FROM PYTHON SOURCE LINES 617-624

Starting points for random walkers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we define some hyperparameters (e.g. the number of walkers and
steps), and initialise the starting positions of walkers. We start all
walkers in a small ball about a chosen point :math:`(0, 0, 0, 0)`.


.. GENERATED FROM PYTHON SOURCE LINES 624-630

.. code-block:: default


    nwalkers = 32
    ndim = nparams
    nsteps = 10000
    walkers_start = np.zeros(nparams) + 1e-4 * np.random.randn(nwalkers, ndim)








.. GENERATED FROM PYTHON SOURCE LINES 635-638

Add the information and run with CoFI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 638-657

.. code-block:: default


    ######## CoFI BaseProblem - provide additional information
    inv_problem.set_log_prior(log_prior)
    inv_problem.set_log_likelihood(log_likelihood)
    inv_problem.set_walkers_starting_pos(walkers_start)

    ######## CoFI InversionOptions - get a different tool
    inv_options_3 = InversionOptions()
    inv_options_3.set_tool("emcee")      # Here we use to Affine Invariant McMC sampler from Goodman and Weare (2010).
    inv_options_3.set_params(nwalkers=nwalkers, nsteps=nsteps, progress=True)

    ######## CoFI Inversion - run it
    inv_3 = Inversion(inv_problem, inv_options_3)
    inv_result_3 = inv_3.run()

    ######## CoFI InversionResult - check result
    print(f"The inversion result from `emcee`:")
    inv_result_3.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10000 [00:00<?, ?it/s]      1%|          | 97/10000 [00:00<00:10, 967.66it/s]      2%|2         | 215/10000 [00:00<00:08, 1089.52it/s]      3%|3         | 336/10000 [00:00<00:08, 1142.34it/s]      5%|4         | 457/10000 [00:00<00:08, 1167.03it/s]      6%|5         | 578/10000 [00:00<00:07, 1181.75it/s]      7%|6         | 699/10000 [00:00<00:07, 1191.06it/s]      8%|8         | 821/10000 [00:00<00:07, 1197.42it/s]      9%|9         | 942/10000 [00:00<00:07, 1201.12it/s]     11%|#         | 1063/10000 [00:00<00:07, 1203.85it/s]     12%|#1        | 1184/10000 [00:01<00:07, 1205.51it/s]     13%|#3        | 1306/10000 [00:01<00:07, 1207.07it/s]     14%|#4        | 1427/10000 [00:01<00:07, 1206.62it/s]     15%|#5        | 1548/10000 [00:01<00:07, 1206.83it/s]     17%|#6        | 1669/10000 [00:01<00:06, 1207.36it/s]     18%|#7        | 1790/10000 [00:01<00:06, 1208.03it/s]     19%|#9        | 1911/10000 [00:01<00:06, 1208.53it/s]     20%|##        | 2032/10000 [00:01<00:06, 1208.54it/s]     22%|##1       | 2153/10000 [00:01<00:06, 1208.88it/s]     23%|##2       | 2274/10000 [00:01<00:06, 1208.90it/s]     24%|##3       | 2395/10000 [00:02<00:06, 1208.77it/s]     25%|##5       | 2516/10000 [00:02<00:06, 1208.78it/s]     26%|##6       | 2637/10000 [00:02<00:06, 1208.62it/s]     28%|##7       | 2758/10000 [00:02<00:05, 1207.80it/s]     29%|##8       | 2879/10000 [00:02<00:05, 1208.26it/s]     30%|###       | 3001/10000 [00:02<00:05, 1209.24it/s]     31%|###1      | 3122/10000 [00:02<00:05, 1208.92it/s]     32%|###2      | 3243/10000 [00:02<00:05, 1208.91it/s]     34%|###3      | 3364/10000 [00:02<00:05, 1208.83it/s]     35%|###4      | 3486/10000 [00:02<00:05, 1209.20it/s]     36%|###6      | 3607/10000 [00:03<00:05, 1208.19it/s]     37%|###7      | 3729/10000 [00:03<00:05, 1208.72it/s]     38%|###8      | 3850/10000 [00:03<00:05, 1208.15it/s]     40%|###9      | 3971/10000 [00:03<00:04, 1208.52it/s]     41%|####      | 4092/10000 [00:03<00:04, 1208.56it/s]     42%|####2     | 4213/10000 [00:03<00:04, 1208.63it/s]     43%|####3     | 4335/10000 [00:03<00:04, 1209.13it/s]     45%|####4     | 4457/10000 [00:03<00:04, 1209.63it/s]     46%|####5     | 4579/10000 [00:03<00:04, 1209.80it/s]     47%|####6     | 4700/10000 [00:03<00:04, 1209.36it/s]     48%|####8     | 4821/10000 [00:04<00:04, 1209.31it/s]     49%|####9     | 4942/10000 [00:04<00:04, 1207.03it/s]     51%|#####     | 5063/10000 [00:04<00:04, 1206.65it/s]     52%|#####1    | 5184/10000 [00:04<00:03, 1207.48it/s]     53%|#####3    | 5305/10000 [00:04<00:03, 1207.99it/s]     54%|#####4    | 5426/10000 [00:04<00:03, 1206.71it/s]     55%|#####5    | 5547/10000 [00:04<00:03, 1207.18it/s]     57%|#####6    | 5668/10000 [00:04<00:03, 1207.00it/s]     58%|#####7    | 5789/10000 [00:04<00:03, 1203.35it/s]     59%|#####9    | 5910/10000 [00:04<00:03, 1203.59it/s]     60%|######    | 6031/10000 [00:05<00:03, 1203.47it/s]     62%|######1   | 6152/10000 [00:05<00:03, 1204.00it/s]     63%|######2   | 6273/10000 [00:05<00:03, 1205.09it/s]     64%|######3   | 6394/10000 [00:05<00:02, 1206.13it/s]     65%|######5   | 6515/10000 [00:05<00:02, 1206.68it/s]     66%|######6   | 6636/10000 [00:05<00:02, 1206.42it/s]     68%|######7   | 6757/10000 [00:05<00:02, 1206.92it/s]     69%|######8   | 6878/10000 [00:05<00:02, 1207.29it/s]     70%|######9   | 6999/10000 [00:05<00:02, 1207.57it/s]     71%|#######1  | 7120/10000 [00:05<00:02, 1207.23it/s]     72%|#######2  | 7241/10000 [00:06<00:02, 1206.20it/s]     74%|#######3  | 7362/10000 [00:06<00:02, 1205.54it/s]     75%|#######4  | 7483/10000 [00:06<00:02, 1206.35it/s]     76%|#######6  | 7604/10000 [00:06<00:01, 1207.17it/s]     77%|#######7  | 7725/10000 [00:06<00:01, 1207.43it/s]     78%|#######8  | 7846/10000 [00:06<00:01, 1207.12it/s]     80%|#######9  | 7968/10000 [00:06<00:01, 1208.01it/s]     81%|########  | 8089/10000 [00:06<00:01, 1208.08it/s]     82%|########2 | 8210/10000 [00:06<00:01, 1208.29it/s]     83%|########3 | 8331/10000 [00:06<00:01, 1208.52it/s]     85%|########4 | 8452/10000 [00:07<00:01, 1207.55it/s]     86%|########5 | 8573/10000 [00:07<00:01, 1206.89it/s]     87%|########6 | 8695/10000 [00:07<00:01, 1207.90it/s]     88%|########8 | 8816/10000 [00:07<00:00, 1208.23it/s]     89%|########9 | 8938/10000 [00:07<00:00, 1208.93it/s]     91%|######### | 9059/10000 [00:07<00:00, 1207.98it/s]     92%|#########1| 9181/10000 [00:07<00:00, 1208.67it/s]     93%|#########3| 9302/10000 [00:07<00:00, 1208.59it/s]     94%|#########4| 9423/10000 [00:07<00:00, 1208.49it/s]     95%|#########5| 9544/10000 [00:07<00:00, 1208.81it/s]     97%|#########6| 9665/10000 [00:08<00:00, 1208.08it/s]     98%|#########7| 9786/10000 [00:08<00:00, 1207.78it/s]     99%|#########9| 9907/10000 [00:08<00:00, 1208.05it/s]    100%|##########| 10000/10000 [00:08<00:00, 1204.50it/s]
    The inversion result from `emcee`:
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    sampler: <emcee.ensemble.EnsembleSampler object>
    blob_names: ['log_likelihood', 'log_prior']




.. GENERATED FROM PYTHON SOURCE LINES 662-673

Post-sampling analysis
~~~~~~~~~~~~~~~~~~~~~~

By default the raw sampler resulting object is attached to ``cofi``\ ’s
inversion result.

Optionally, you can convert that into an ``arviz`` data structure to
have access to a range of analysis functions. (See more details in
`arviz
documentation <https://python.arviz.org/en/latest/index.html>`__).


.. GENERATED FROM PYTHON SOURCE LINES 673-682

.. code-block:: default


    import arviz as az

    labels = ["m0", "m1", "m2","m3"]

    sampler = inv_result_3.sampler
    az_idata = az.from_emcee(sampler, var_names=labels)
    # az_idata = inv_result_3.to_arviz()      # alternatively








.. GENERATED FROM PYTHON SOURCE LINES 684-687

.. code-block:: default


    az_idata.get("posterior")






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2 {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:  (chain: 32, draw: 10000)
    Coordinates:
      * chain    (chain) int64 0 1 2 3 4 5 6 7 8 9 ... 22 23 24 25 26 27 28 29 30 31
      * draw     (draw) int64 0 1 2 3 4 5 6 7 ... 9993 9994 9995 9996 9997 9998 9999
    Data variables:
        m0       (chain, draw) float64 -0.0001787 -0.000345 ... -6.586 -6.586
        m1       (chain, draw) float64 -2.378e-05 0.0002541 ... -5.178 -5.178
        m2       (chain, draw) float64 -9.894e-05 -0.0002379 ... 2.169 2.169
        m3       (chain, draw) float64 -0.0001222 -0.0004012 ... 1.081 1.081
    Attributes:
        created_at:                 2022-12-08T23:45:41.285580
        arviz_version:              0.12.1
        inference_library:          emcee
        inference_library_version:  3.1.2</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-39d5a2ee-7b72-4524-9aa8-93ce572ee075' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-39d5a2ee-7b72-4524-9aa8-93ce572ee075' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>chain</span>: 32</li><li><span class='xr-has-index'>draw</span>: 10000</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-04b5542f-8c74-4a82-ba0b-85da147ef645' class='xr-section-summary-in' type='checkbox'  checked><label for='section-04b5542f-8c74-4a82-ba0b-85da147ef645' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>chain</span></div><div class='xr-var-dims'>(chain)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 6 ... 26 27 28 29 30 31</div><input id='attrs-d19b3fef-0e8d-4def-8177-dd5ba13fe650' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-d19b3fef-0e8d-4def-8177-dd5ba13fe650' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bdd5fc57-a86e-4c8a-8dff-cc61b8e4e8de' class='xr-var-data-in' type='checkbox'><label for='data-bdd5fc57-a86e-4c8a-8dff-cc61b8e4e8de' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
           18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>draw</span></div><div class='xr-var-dims'>(draw)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 ... 9996 9997 9998 9999</div><input id='attrs-df55479e-def4-40c6-9d40-d15b8bf2ba04' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-df55479e-def4-40c6-9d40-d15b8bf2ba04' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ccc80215-ba46-44c6-8acb-c2bab5659587' class='xr-var-data-in' type='checkbox'><label for='data-ccc80215-ba46-44c6-8acb-c2bab5659587' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0,    1,    2, ..., 9997, 9998, 9999])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-cd192545-e095-43b6-80e9-dfac4f778572' class='xr-section-summary-in' type='checkbox'  checked><label for='section-cd192545-e095-43b6-80e9-dfac4f778572' class='xr-section-summary' >Data variables: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>m0</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-0.0001787 -0.000345 ... -6.586</div><input id='attrs-075fe00d-465f-404d-92d2-cb1d8b1ccefc' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-075fe00d-465f-404d-92d2-cb1d8b1ccefc' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-05c11113-3da2-4644-abfd-eb8f8db236b1' class='xr-var-data-in' type='checkbox'><label for='data-05c11113-3da2-4644-abfd-eb8f8db236b1' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-1.78732944e-04, -3.44981303e-04, -4.34127035e-04, ...,
            -6.00770614e+00, -6.39117937e+00, -6.39117937e+00],
           [ 7.75848943e-06,  7.75848943e-06,  7.75848943e-06, ...,
            -5.09381401e+00, -4.96946591e+00, -4.96946591e+00],
           [-8.61800646e-05, -8.61800646e-05, -8.32036209e-05, ...,
            -5.53264125e+00, -5.46873639e+00, -5.46873639e+00],
           ...,
           [ 1.94553690e-06, -3.41592213e-05, -3.82827304e-05, ...,
            -6.81393678e+00, -6.81393678e+00, -7.00851869e+00],
           [ 1.25925755e-04,  1.25925755e-04,  7.64024427e-05, ...,
            -5.02468418e+00, -5.02468418e+00, -4.55315661e+00],
           [-6.68090454e-05, -2.02649998e-04, -1.96411754e-04, ...,
            -6.32939624e+00, -6.58642942e+00, -6.58642942e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m1</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-2.378e-05 0.0002541 ... -5.178</div><input id='attrs-886d0fdb-bf82-46e1-8b21-0d9c99fa4696' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-886d0fdb-bf82-46e1-8b21-0d9c99fa4696' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ac1ec44c-8b44-46f6-a903-2049af430732' class='xr-var-data-in' type='checkbox'><label for='data-ac1ec44c-8b44-46f6-a903-2049af430732' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-2.37767499e-05,  2.54096516e-04,  2.81173296e-04, ...,
            -5.51370206e+00, -5.56416753e+00, -5.56416753e+00],
           [ 6.20145762e-05,  6.20145762e-05,  6.20145762e-05, ...,
            -5.17986958e+00, -5.19260686e+00, -5.19260686e+00],
           [ 7.82272393e-05,  7.82272393e-05,  7.53124832e-05, ...,
            -5.12444063e+00, -5.16703523e+00, -5.16703523e+00],
           ...,
           [ 2.97848286e-05,  1.90816844e-05,  1.44494684e-05, ...,
            -5.88773061e+00, -5.88773061e+00, -5.99197849e+00],
           [-4.26767338e-05, -4.26767338e-05,  6.78140335e-05, ...,
            -4.82993147e+00, -4.82993147e+00, -4.78618773e+00],
           [ 9.92042350e-05,  1.99203020e-04,  1.94612431e-04, ...,
            -5.32727616e+00, -5.17832026e+00, -5.17832026e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m2</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-9.894e-05 -0.0002379 ... 2.169</div><input id='attrs-42474b69-addd-4f51-9ec3-edba61fa02c8' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-42474b69-addd-4f51-9ec3-edba61fa02c8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-09dd3a9c-0eb3-4beb-99b2-4fc099226b5a' class='xr-var-data-in' type='checkbox'><label for='data-09dd3a9c-0eb3-4beb-99b2-4fc099226b5a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-9.89410103e-05, -2.37879564e-04, -4.09564337e-04, ...,
             2.02113121e+00,  2.21982791e+00,  2.21982791e+00],
           [ 1.42263385e-04,  1.42263385e-04,  1.42263385e-04, ...,
             1.61467987e+00,  1.56341528e+00,  1.56341528e+00],
           [-8.92170728e-05, -8.92170728e-05, -9.61350224e-05, ...,
             1.74141673e+00,  1.71198938e+00,  1.71198938e+00],
           ...,
           [ 3.56775340e-05,  8.77687625e-06,  7.03316143e-06, ...,
             2.35561426e+00,  2.35561426e+00,  2.44871396e+00],
           [ 6.83631299e-05,  6.83631299e-05,  1.37032791e-05, ...,
             1.45496935e+00,  1.45496935e+00,  1.14347167e+00],
           [-1.74959757e-05, -7.80101259e-05, -7.36235007e-05, ...,
             2.10359059e+00,  2.16947635e+00,  2.16947635e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m3</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-0.0001222 -0.0004012 ... 1.081</div><input id='attrs-83e25e8a-4a89-4b64-a12d-4a447e628d4b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-83e25e8a-4a89-4b64-a12d-4a447e628d4b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-25855a32-e2bc-475f-94a9-0ab8b26d8a69' class='xr-var-data-in' type='checkbox'><label for='data-25855a32-e2bc-475f-94a9-0ab8b26d8a69' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[-1.22152764e-04, -4.01166097e-04, -5.40330624e-04, ...,
             1.04991546e+00,  1.09729869e+00,  1.09729869e+00],
           [-1.29913791e-04, -1.29913791e-04, -1.29913791e-04, ...,
             9.46232885e-01,  9.34993516e-01,  9.34993516e-01],
           [-3.16737235e-05, -3.16737235e-05, -2.58872245e-05, ...,
             9.81670977e-01,  9.70710271e-01,  9.70710271e-01],
           ...,
           [-6.38534794e-05, -7.55033536e-05, -1.02645187e-04, ...,
             1.19601561e+00,  1.19601561e+00,  1.22860581e+00],
           [ 2.95122897e-05,  2.95122897e-05,  7.89052950e-05, ...,
             8.59088061e-01,  8.59088061e-01,  7.61748831e-01],
           [-7.55745159e-05, -1.49640495e-04, -1.33363159e-04, ...,
             1.06726605e+00,  1.08112932e+00,  1.08112932e+00]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-c834da23-ae7f-4e88-aca6-aceb77b3e1a7' class='xr-section-summary-in' type='checkbox'  checked><label for='section-c834da23-ae7f-4e88-aca6-aceb77b3e1a7' class='xr-section-summary' >Attributes: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>created_at :</span></dt><dd>2022-12-08T23:45:41.285580</dd><dt><span>arviz_version :</span></dt><dd>0.12.1</dd><dt><span>inference_library :</span></dt><dd>emcee</dd><dt><span>inference_library_version :</span></dt><dd>3.1.2</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 689-703

.. code-block:: default


    # a standard `trace` plot
    axes = az.plot_trace(az_idata, backend_kwargs={"constrained_layout":True}); 

    # add legends
    for i, axes_pair in enumerate(axes):
        ax1 = axes_pair[0]
        ax2 = axes_pair[1]
        ax1.axvline(true_model[i], linestyle='dotted', color='red')
        ax1.set_xlabel("parameter value")
        ax1.set_ylabel("density value")
        ax2.set_xlabel("number of iterations")
        ax2.set_ylabel("parameter value")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_006.png
   :alt: m0, m0, m1, m1, m2, m2, m3, m3
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 705-709

.. code-block:: default


    tau = sampler.get_autocorr_time()
    print(f"autocorrelation time: {tau}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    autocorrelation time: [68.29219144 76.96574306 68.65854986 73.0627644 ]




.. GENERATED FROM PYTHON SOURCE LINES 711-736

.. code-block:: default


    # a Corner plot

    fig, axes = plt.subplots(nparams, nparams, figsize=(12,8))

    if(False): # if we are plotting the model ensemble use this
        az.plot_pair(
            az_idata.sel(draw=slice(300,None)), 
            marginals=True, 
            reference_values=dict(zip([f"m{i}" for i in range(4)], true_model.tolist())),
            ax=axes,
        );
    else: # if we wish to plot a kernel density plot then use this option
        az.plot_pair(
            az_idata.sel(draw=slice(300,None)), 
            marginals=True, 
            reference_values=dict(zip([f"m{i}" for i in range(4)], true_model.tolist())),
            kind="kde",
            kde_kwargs={
                "hdi_probs": [0.3, 0.6, 0.9],  # Plot 30%, 60% and 90% HDI contours
                "contourf_kwargs": {"cmap": "Blues"},
            },
            ax=axes,
        );




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_007.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 741-744

Now we plot the predicted curves for the posterior ensemble of
solutions.


.. GENERATED FROM PYTHON SOURCE LINES 744-752

.. code-block:: default


    flat_samples = sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

    plot_data()
    plot_models(flat_samples[inds])
    plot_model(x,true_y, "True model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_008.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 757-760

Expected values, credible intervals and model covariance matrix from the ensemble
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 760-766

.. code-block:: default


    print("\n Expected value and 95% credible intervals ")
    for i in range(ndim):
        mcmc = np.percentile(flat_samples[:, i], [5, 50, 95])
        print(" {} {:7.3f} [{:7.3f}, {:7.3f}]".format(labels[i],mcmc[1],mcmc[0],mcmc[2]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     Expected value and 95% credible intervals 
     m0  -5.718 [ -6.430,  -5.019]
     m1  -5.114 [ -5.598,  -4.632]
     m2   1.826 [  1.457,   2.204]
     m3   0.976 [  0.843,   1.109]




.. GENERATED FROM PYTHON SOURCE LINES 768-776

.. code-block:: default


    CMpost = np.cov(flat_samples.T)
    CM_std= np.std(flat_samples,axis=0)
    print('Posterior model covariance matrix\n',CMpost)
    print('\n Posterior estimate of model standard deviations in each parameter')
    for i in range(ndim):
        print("    {} {:7.4f}".format(labels[i],CM_std[i]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Posterior model covariance matrix
     [[ 0.18833668  0.05827435 -0.08045926 -0.02521073]
     [ 0.05827435  0.08626787 -0.03301353 -0.01800818]
     [-0.08045926 -0.03301353  0.05142114  0.0168967 ]
     [-0.02521073 -0.01800818  0.0168967   0.00669061]]

     Posterior estimate of model standard deviations in each parameter
        m0  0.4340
        m1  0.2937
        m2  0.2268
        m3  0.0818




.. GENERATED FROM PYTHON SOURCE LINES 781-783

--------------


.. GENERATED FROM PYTHON SOURCE LINES 786-789

Challenge: Change the prior model bounds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 792-842

Replace the previous prior bounds to new values

The original uniform bounds had

:math:`{\mathbf l}^T = (-10.,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (10.,10.,10.,10.)`.

Lets replace with

:math:`{\mathbf l}^T = (-1.,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (2.,10.,10.,10.)`.

We have only changed the bounds of the first parameter. However since
the true value of constant term was 6, these bounds are now inconsistent
with the true model.

What does this do to the posterior distribution?

|Upload to Jamboard 2|

Start from the code template below:

::

   m_lower_bound = <CHANGE ME>             # lower bound for uniform prior
   m_upper_bound = <CHANGE ME>             # upper bound for uniform prior

   def log_prior(model):    # uniform distribution
       for i in range(len(m_lower_bound)):
           if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
       return 0.0 # model lies within bounds -> return log(1)

   ######## CoFI BaseProblem - update information
   inv_problem.set_log_prior(log_prior)

   ######## CoFI Inversion - run it
   inv_4 = Inversion(inv_problem, inv_options_3)
   inv_result_4 = inv_4.run()

   flat_samples = inv_result_4.sampler.get_chain(discard=300, thin=30, flat=True)
   inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

   print("Resulting samples with prior model lower bounds of <CHANGE ME>, upper bounds of <CHANGE ME>")
   plot_data()
   plot_models(flat_samples[inds])
   plot_model(x, true_y, "True model", color="darkorange")

.. |Upload to Jamboard 2| image:: https://img.shields.io/badge/Click%20&%20upload%20your%20results%20to-Jamboard-lightgrey?logo=jamboard&style=for-the-badge&color=fcbf49&labelColor=edede9
   :target: https://jamboard.google.com/d/1h_O8PNuHzpyH2zQUraqiMT4SQR0TMhUmiZzFn_HMZl4/edit?usp=sharing


.. GENERATED FROM PYTHON SOURCE LINES 842-847

.. code-block:: default


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 849-875

.. code-block:: default


    #@title Solution

    m_lower_bound = np.array([-1,-10,-10,-10])             # lower bound for uniform prior
    m_upper_bound = np.array([2,10,10,10])                 # upper bound for uniform prior

    def log_prior(model):    # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)

    ######## CoFI BaseProblem - update information
    inv_problem.set_log_prior(log_prior)

    ######## CoFI Inversion - run it
    inv_4 = Inversion(inv_problem, inv_options_3)
    inv_result_4 = inv_4.run()

    flat_samples = inv_result_4.sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

    print("Resulting samples with prior model lower bounds of [-1,-10,-10,-10], upper bounds of [2,10,10,10]")
    plot_data()
    plot_models(flat_samples[inds])
    plot_model(x, true_y, "True model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_009.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10000 [00:00<?, ?it/s]      1%|1         | 118/10000 [00:00<00:08, 1174.09it/s]      2%|2         | 238/10000 [00:00<00:08, 1184.20it/s]      4%|3         | 358/10000 [00:00<00:08, 1187.39it/s]      5%|4         | 478/10000 [00:00<00:08, 1188.90it/s]      6%|5         | 597/10000 [00:00<00:07, 1185.30it/s]      7%|7         | 717/10000 [00:00<00:07, 1188.64it/s]      8%|8         | 837/10000 [00:00<00:07, 1190.82it/s]     10%|9         | 957/10000 [00:00<00:07, 1191.96it/s]     11%|#         | 1077/10000 [00:00<00:07, 1192.51it/s]     12%|#1        | 1197/10000 [00:01<00:07, 1187.20it/s]     13%|#3        | 1316/10000 [00:01<00:07, 1188.04it/s]     14%|#4        | 1436/10000 [00:01<00:07, 1188.83it/s]     16%|#5        | 1555/10000 [00:01<00:07, 1188.99it/s]     17%|#6        | 1675/10000 [00:01<00:06, 1190.08it/s]     18%|#7        | 1795/10000 [00:01<00:06, 1186.11it/s]     19%|#9        | 1915/10000 [00:01<00:06, 1187.82it/s]     20%|##        | 2035/10000 [00:01<00:06, 1189.65it/s]     22%|##1       | 2155/10000 [00:01<00:06, 1190.41it/s]     23%|##2       | 2275/10000 [00:01<00:06, 1190.68it/s]     24%|##3       | 2395/10000 [00:02<00:06, 1188.41it/s]     25%|##5       | 2515/10000 [00:02<00:06, 1189.34it/s]     26%|##6       | 2635/10000 [00:02<00:06, 1189.88it/s]     28%|##7       | 2755/10000 [00:02<00:06, 1190.81it/s]     29%|##8       | 2875/10000 [00:02<00:05, 1190.92it/s]     30%|##9       | 2995/10000 [00:02<00:05, 1186.57it/s]     31%|###1      | 3114/10000 [00:02<00:05, 1187.53it/s]     32%|###2      | 3234/10000 [00:02<00:05, 1188.79it/s]     34%|###3      | 3354/10000 [00:02<00:05, 1189.54it/s]     35%|###4      | 3473/10000 [00:02<00:05, 1187.50it/s]     36%|###5      | 3592/10000 [00:03<00:05, 1186.62it/s]     37%|###7      | 3712/10000 [00:03<00:05, 1188.04it/s]     38%|###8      | 3832/10000 [00:03<00:05, 1189.57it/s]     40%|###9      | 3952/10000 [00:03<00:05, 1189.79it/s]     41%|####      | 4072/10000 [00:03<00:04, 1190.62it/s]     42%|####1     | 4192/10000 [00:03<00:04, 1186.60it/s]     43%|####3     | 4311/10000 [00:03<00:04, 1187.49it/s]     44%|####4     | 4431/10000 [00:03<00:04, 1188.51it/s]     46%|####5     | 4550/10000 [00:03<00:04, 1188.43it/s]     47%|####6     | 4669/10000 [00:03<00:04, 1188.09it/s]     48%|####7     | 4788/10000 [00:04<00:04, 1186.40it/s]     49%|####9     | 4908/10000 [00:04<00:04, 1187.62it/s]     50%|#####     | 5028/10000 [00:04<00:04, 1188.89it/s]     51%|#####1    | 5148/10000 [00:04<00:04, 1189.55it/s]     53%|#####2    | 5268/10000 [00:04<00:03, 1189.87it/s]     54%|#####3    | 5387/10000 [00:04<00:03, 1185.70it/s]     55%|#####5    | 5507/10000 [00:04<00:03, 1187.41it/s]     56%|#####6    | 5627/10000 [00:04<00:03, 1188.90it/s]     57%|#####7    | 5747/10000 [00:04<00:03, 1189.62it/s]     59%|#####8    | 5866/10000 [00:04<00:03, 1188.59it/s]     60%|#####9    | 5985/10000 [00:05<00:03, 1187.94it/s]     61%|######1   | 6105/10000 [00:05<00:03, 1189.06it/s]     62%|######2   | 6225/10000 [00:05<00:03, 1190.17it/s]     63%|######3   | 6345/10000 [00:05<00:03, 1191.14it/s]     65%|######4   | 6465/10000 [00:05<00:02, 1192.04it/s]     66%|######5   | 6585/10000 [00:05<00:02, 1187.58it/s]     67%|######7   | 6704/10000 [00:05<00:02, 1187.59it/s]     68%|######8   | 6824/10000 [00:05<00:02, 1188.65it/s]     69%|######9   | 6943/10000 [00:05<00:02, 1188.69it/s]     71%|#######   | 7062/10000 [00:05<00:02, 1182.82it/s]     72%|#######1  | 7181/10000 [00:06<00:02, 1184.76it/s]     73%|#######3  | 7300/10000 [00:06<00:02, 1185.50it/s]     74%|#######4  | 7420/10000 [00:06<00:02, 1186.85it/s]     75%|#######5  | 7540/10000 [00:06<00:02, 1188.00it/s]     77%|#######6  | 7660/10000 [00:06<00:01, 1189.65it/s]     78%|#######7  | 7779/10000 [00:06<00:01, 1185.22it/s]     79%|#######8  | 7899/10000 [00:06<00:01, 1187.66it/s]     80%|########  | 8019/10000 [00:06<00:01, 1188.99it/s]     81%|########1 | 8139/10000 [00:06<00:01, 1190.05it/s]     83%|########2 | 8259/10000 [00:06<00:01, 1188.84it/s]     84%|########3 | 8378/10000 [00:07<00:01, 1189.00it/s]     85%|########4 | 8498/10000 [00:07<00:01, 1190.15it/s]     86%|########6 | 8618/10000 [00:07<00:01, 1190.46it/s]     87%|########7 | 8738/10000 [00:07<00:01, 1191.55it/s]     89%|########8 | 8858/10000 [00:07<00:00, 1192.00it/s]     90%|########9 | 8978/10000 [00:07<00:00, 1187.84it/s]     91%|######### | 9098/10000 [00:07<00:00, 1189.07it/s]     92%|#########2| 9218/10000 [00:07<00:00, 1190.09it/s]     93%|#########3| 9338/10000 [00:07<00:00, 1190.63it/s]     95%|#########4| 9458/10000 [00:07<00:00, 1189.20it/s]     96%|#########5| 9578/10000 [00:08<00:00, 1190.30it/s]     97%|#########6| 9698/10000 [00:08<00:00, 1191.35it/s]     98%|#########8| 9818/10000 [00:08<00:00, 1192.25it/s]     99%|#########9| 9938/10000 [00:08<00:00, 1192.44it/s]    100%|##########| 10000/10000 [00:08<00:00, 1188.88it/s]
    Resulting samples with prior model lower bounds of [-1,-10,-10,-10], upper bounds of [2,10,10,10]




.. GENERATED FROM PYTHON SOURCE LINES 880-882

Why do you think the posterior distribution looks like this?


.. GENERATED FROM PYTHON SOURCE LINES 885-887

--------------


.. GENERATED FROM PYTHON SOURCE LINES 890-900

Challenge: Change the data uncertainty
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To change the data uncertainty we increase ``sigma`` and then redefine
the log-Likelihood.

Here we increase the assumed data standard deviation by a factor of of
50! So we are telling the inversion that the data are far less accurate
than they actually are.


.. GENERATED FROM PYTHON SOURCE LINES 900-909

.. code-block:: default


    sigma = 50.0                                     # common noise standard deviation
    Cdinv = np.eye(len(data_y))/(sigma**2)      # inverse data covariance matrix

    def log_likelihood(model):
        y_synthetics = forward(model)
        residual = data_y - y_synthetics
        return -0.5 * residual @ (Cdinv @ residual).T








.. GENERATED FROM PYTHON SOURCE LINES 914-916

Lets return the prior to the original bounds.


.. GENERATED FROM PYTHON SOURCE LINES 916-925

.. code-block:: default


    m_lower_bound = np.ones(4) * (-10.)             # lower bound for uniform prior
    m_upper_bound = np.ones(4) * 10                 # upper bound for uniform prior

    def log_prior(model):    # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)








.. GENERATED FROM PYTHON SOURCE LINES 930-958

Your challenge is then to tell CoFI that the Likelihood and prior have
changed and then to rerun the sample, and plot results.

|Upload to Jamboard 3|

Feel free to start from the code below:

::

   ######## CoFI BaseProblem - update information
   inv_problem.set_log_likelihood(<CHANGE ME>)
   inv_problem.set_log_prior(<CHANGE ME>)

   ######## CoFI Inversion - run it
   inv_5 = Inversion(inv_problem, inv_options_3)
   inv_result_5 = inv_5.run()

   flat_samples = inv_result_5.sampler.get_chain(discard=300, thin=30, flat=True)
   inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

   print("Resulting samples from changed data uncertainty")
   plot_data()
   plot_models(flat_samples[inds])
   plot_model(x,true_y, "True model", color="darkorange")

.. |Upload to Jamboard 3| image:: https://img.shields.io/badge/Click%20&%20upload%20your%20results%20to-Jamboard-lightgrey?logo=jamboard&style=for-the-badge&color=fcbf49&labelColor=edede9
   :target: https://jamboard.google.com/d/1ewIkma6uTeNWu7ACEC3vG4J0FNPQZVLdlQLhyeLh-qM/edit?usp=sharing


.. GENERATED FROM PYTHON SOURCE LINES 958-963

.. code-block:: default


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 968-970

The answer is in the next cells if you want to run them.


.. GENERATED FROM PYTHON SOURCE LINES 970-989

.. code-block:: default


    #@title Solution

    ######## CoFI BaseProblem - update information
    inv_problem.set_log_likelihood(log_likelihood)
    inv_problem.set_log_prior(log_prior)

    ######## CoFI Inversion - run it
    inv_5 = Inversion(inv_problem, inv_options_3)
    inv_result_5 = inv_5.run()

    flat_samples = inv_result_5.sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

    print("Resulting samples from changed data uncertainty")
    plot_data()
    plot_models(flat_samples[inds])
    plot_model(x,true_y, "True model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_010.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_010.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10000 [00:00<?, ?it/s]      1%|1         | 121/10000 [00:00<00:08, 1202.67it/s]      2%|2         | 243/10000 [00:00<00:08, 1209.68it/s]      4%|3         | 366/10000 [00:00<00:07, 1215.41it/s]      5%|4         | 488/10000 [00:00<00:07, 1201.44it/s]      6%|6         | 609/10000 [00:00<00:07, 1197.81it/s]      7%|7         | 732/10000 [00:00<00:07, 1205.45it/s]      9%|8         | 855/10000 [00:00<00:07, 1210.22it/s]     10%|9         | 978/10000 [00:00<00:07, 1213.34it/s]     11%|#1        | 1101/10000 [00:00<00:07, 1216.35it/s]     12%|#2        | 1223/10000 [00:01<00:07, 1211.74it/s]     13%|#3        | 1346/10000 [00:01<00:07, 1215.23it/s]     15%|#4        | 1468/10000 [00:01<00:07, 1216.64it/s]     16%|#5        | 1591/10000 [00:01<00:06, 1218.10it/s]     17%|#7        | 1713/10000 [00:01<00:06, 1217.67it/s]     18%|#8        | 1835/10000 [00:01<00:06, 1214.04it/s]     20%|#9        | 1958/10000 [00:01<00:06, 1215.93it/s]     21%|##        | 2081/10000 [00:01<00:06, 1217.72it/s]     22%|##2       | 2204/10000 [00:01<00:06, 1219.20it/s]     23%|##3       | 2327/10000 [00:01<00:06, 1219.48it/s]     24%|##4       | 2449/10000 [00:02<00:06, 1213.46it/s]     26%|##5       | 2571/10000 [00:02<00:06, 1214.10it/s]     27%|##6       | 2694/10000 [00:02<00:06, 1216.99it/s]     28%|##8       | 2817/10000 [00:02<00:05, 1218.83it/s]     29%|##9       | 2939/10000 [00:02<00:05, 1208.84it/s]     31%|###       | 3060/10000 [00:02<00:05, 1207.37it/s]     32%|###1      | 3183/10000 [00:02<00:05, 1211.70it/s]     33%|###3      | 3305/10000 [00:02<00:05, 1214.13it/s]     34%|###4      | 3428/10000 [00:02<00:05, 1216.72it/s]     36%|###5      | 3550/10000 [00:02<00:05, 1217.65it/s]     37%|###6      | 3672/10000 [00:03<00:05, 1216.02it/s]     38%|###7      | 3794/10000 [00:03<00:05, 1216.94it/s]     39%|###9      | 3917/10000 [00:03<00:04, 1217.91it/s]     40%|####      | 4040/10000 [00:03<00:04, 1218.81it/s]     42%|####1     | 4162/10000 [00:03<00:04, 1218.49it/s]     43%|####2     | 4284/10000 [00:03<00:04, 1214.09it/s]     44%|####4     | 4406/10000 [00:03<00:04, 1213.30it/s]     45%|####5     | 4528/10000 [00:03<00:04, 1214.05it/s]     46%|####6     | 4650/10000 [00:03<00:04, 1215.30it/s]     48%|####7     | 4772/10000 [00:03<00:04, 1216.26it/s]     49%|####8     | 4894/10000 [00:04<00:04, 1216.01it/s]     50%|#####     | 5016/10000 [00:04<00:04, 1217.07it/s]     51%|#####1    | 5139/10000 [00:04<00:03, 1218.45it/s]     53%|#####2    | 5261/10000 [00:04<00:03, 1209.86it/s]     54%|#####3    | 5383/10000 [00:04<00:03, 1212.50it/s]     55%|#####5    | 5505/10000 [00:04<00:03, 1209.58it/s]     56%|#####6    | 5627/10000 [00:04<00:03, 1212.66it/s]     57%|#####7    | 5749/10000 [00:04<00:03, 1214.45it/s]     59%|#####8    | 5872/10000 [00:04<00:03, 1216.25it/s]     60%|#####9    | 5995/10000 [00:04<00:03, 1217.96it/s]     61%|######1   | 6117/10000 [00:05<00:03, 1205.79it/s]     62%|######2   | 6239/10000 [00:05<00:03, 1209.91it/s]     64%|######3   | 6361/10000 [00:05<00:03, 1212.05it/s]     65%|######4   | 6483/10000 [00:05<00:02, 1212.81it/s]     66%|######6   | 6605/10000 [00:05<00:02, 1214.33it/s]     67%|######7   | 6727/10000 [00:05<00:02, 1207.63it/s]     68%|######8   | 6849/10000 [00:05<00:02, 1211.23it/s]     70%|######9   | 6971/10000 [00:05<00:02, 1204.33it/s]     71%|#######   | 7093/10000 [00:05<00:02, 1206.34it/s]     72%|#######2  | 7215/10000 [00:05<00:02, 1210.03it/s]     73%|#######3  | 7337/10000 [00:06<00:02, 1207.89it/s]     75%|#######4  | 7459/10000 [00:06<00:02, 1210.55it/s]     76%|#######5  | 7581/10000 [00:06<00:01, 1212.92it/s]     77%|#######7  | 7703/10000 [00:06<00:01, 1212.50it/s]     78%|#######8  | 7825/10000 [00:06<00:01, 1212.24it/s]     79%|#######9  | 7947/10000 [00:06<00:01, 1202.98it/s]     81%|########  | 8069/10000 [00:06<00:01, 1206.46it/s]     82%|########1 | 8191/10000 [00:06<00:01, 1210.15it/s]     83%|########3 | 8313/10000 [00:06<00:01, 1212.44it/s]     84%|########4 | 8435/10000 [00:06<00:01, 1214.52it/s]     86%|########5 | 8557/10000 [00:07<00:01, 1211.23it/s]     87%|########6 | 8679/10000 [00:07<00:01, 1213.45it/s]     88%|########8 | 8801/10000 [00:07<00:00, 1211.94it/s]     89%|########9 | 8923/10000 [00:07<00:00, 1205.41it/s]     90%|######### | 9045/10000 [00:07<00:00, 1207.52it/s]     92%|#########1| 9166/10000 [00:07<00:00, 1205.15it/s]     93%|#########2| 9288/10000 [00:07<00:00, 1209.41it/s]     94%|#########4| 9410/10000 [00:07<00:00, 1211.82it/s]     95%|#########5| 9532/10000 [00:07<00:00, 1213.47it/s]     97%|#########6| 9654/10000 [00:07<00:00, 1211.92it/s]     98%|#########7| 9776/10000 [00:08<00:00, 1208.24it/s]     99%|#########8| 9898/10000 [00:08<00:00, 1210.45it/s]    100%|##########| 10000/10000 [00:08<00:00, 1212.47it/s]
    Resulting samples from changed data uncertainty




.. GENERATED FROM PYTHON SOURCE LINES 994-1042

Challenge: Change the number of walkers / steps in the McMC algorithm (optional)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now lets decrease the number of steps performed by the McMC algorithm.
It will be faster but perform less exploration of the model parameters.

We suggest you reduce the number of steps taken by all 32 random walkers
and see how it affects the posterior ensemble.

|Upload to Jamboard 4|

You can start from code template below:

::

   # change number of steps
   nsteps = <CHANGE ME>              # instead of 10000

   # change number of walkers
   nwalkers = <CHANGE ME>            # instead of 32
   walkers_start = np.zeros(nparams) + 1e-4 * np.random.randn(nwalkers, ndim)

   # let's return to the old uncertainty settings
   sigma = 1.0                                     # common noise standard deviation
   Cdinv = np.eye(len(data_y))/(sigma**2)      # inverse data covariance matrix

   ######## CoFI BaseProblem - update information
   inv_problem.set_walkers_starting_pos(walkers_start)

   ######## CoFI InversionOptions - get a different tool
   inv_options_3.set_params(nsteps=nsteps, nwalkers=nwalkers)

   ######## CoFI Inversion - run it
   inv_6 = Inversion(inv_problem, inv_options_3)
   inv_result_6 = inv_6.run()

   ######## CoFI InversionResult - plot result
   flat_samples = inv_result_6.sampler.get_chain(discard=300, thin=30, flat=True)
   inds = np.random.randint(len(flat_samples), size=10) # get a random selection from posterior ensemble

   print(f"Inference results from {nsteps} steps and {nwalkers} walkers")
   plot_data()
   plot_models(flat_samples[inds])
   plot_model(x,true_y, "True model", color="darkorange")

.. |Upload to Jamboard 4| image:: https://img.shields.io/badge/Click%20&%20upload%20your%20results%20to-Jamboard-lightgrey?logo=jamboard&style=for-the-badge&color=fcbf49&labelColor=edede9
   :target: https://jamboard.google.com/d/1vAm3dpaI4UTZiFXzb6vEku8AlVWUw7PRxz8KJk-dVf8/edit?usp=sharing


.. GENERATED FROM PYTHON SOURCE LINES 1042-1047

.. code-block:: default


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 1049-1082

.. code-block:: default


    #@title Solution

    # change number of steps
    nsteps = 400              # instead of 10000

    # change number of walkers
    nwalkers = 30             # instead of 32
    walkers_start = np.zeros(nparams) + 1e-4 * np.random.randn(nwalkers, ndim)

    # let's return to the old uncertainty settings
    sigma = 1.0                                     # common noise standard deviation
    Cdinv = np.eye(len(data_y))/(sigma**2)      # inverse data covariance matrix

    ######## CoFI BaseProblem - update information
    inv_problem.set_walkers_starting_pos(walkers_start)

    ######## CoFI InversionOptions - get a different tool
    inv_options_3.set_params(nsteps=nsteps, nwalkers=nwalkers)

    ######## CoFI Inversion - run it
    inv_6 = Inversion(inv_problem, inv_options_3)
    inv_result_6 = inv_6.run()

    ######## CoFI InversionResult - plot result
    flat_samples = inv_result_6.sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=10) # get a random selection from posterior ensemble

    print(f"Inference results from {nsteps} steps and {nwalkers} walkers")
    plot_data()
    plot_models(flat_samples[inds])
    plot_model(x,true_y, "True model", color="darkorange")




.. image-sg:: /tutorials/generated/images/sphx_glr_1_linear_regression_011.png
   :alt: 1 linear regression
   :srcset: /tutorials/generated/images/sphx_glr_1_linear_regression_011.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/400 [00:00<?, ?it/s]     31%|###1      | 125/400 [00:00<00:00, 1242.54it/s]     63%|######3   | 252/400 [00:00<00:00, 1254.11it/s]     95%|#########4| 379/400 [00:00<00:00, 1258.18it/s]    100%|##########| 400/400 [00:00<00:00, 1255.09it/s]
    Inference results from 400 steps and 30 walkers




.. GENERATED FROM PYTHON SOURCE LINES 1087-1095

--------------

Where to next?
--------------

-  Linear regression with Eustatic Sea-level data - `link to
   notebook <https://github.com/inlab-geo/cofi-examples/blob/main/examples/linear_regression/linear_regression_sealevel.ipynb>`__


.. GENERATED FROM PYTHON SOURCE LINES 1098-1103

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 1103-1109

.. code-block:: default


    watermark_list = ["cofi", "numpy", "scipy", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cofi 0.1.2.dev22
    numpy 1.21.6
    scipy 1.9.1
    matplotlib 3.5.3
    emcee 3.1.2
    arviz 0.12.1




.. GENERATED FROM PYTHON SOURCE LINES 1110-1110

sphinx_gallery_thumbnail_number = -1


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  28.891 seconds)


.. _sphx_glr_download_tutorials_generated_1_linear_regression.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 1_linear_regression.py <1_linear_regression.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 1_linear_regression.ipynb <1_linear_regression.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
