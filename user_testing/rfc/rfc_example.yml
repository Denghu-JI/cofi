name: Receiver function example
description: >
  This is a simple receiver function example. This YML file is meant to show
  how you can specify bounds on your model parameters. You can use any distribution
  defined in scipy.stats. In this example only uniform and gaussian distributions
  are used. Uniform a b means a uniform distribution between (a, a+b) and 
  norm a, b means a normal distribution with mean a and std-dev b.

# This is the specification of the model that will be optimized/inverted for.
# You are either specify values for each parameter, OR a distribution for each
# parameter. These are used as initial values at the start of the inversion, and
# (if you specify distributions) some inverters can use the distributions in 
# their sampling calculations. In this example note that some of the parameters
# are held fixed by using a uniform distribution with 0 width. 
model: &idmodel
  parameters:
    - name: earthmodel
      bounds: [
                [uniform 7 2, uniform 2 2, uniform 1.7 0],
                [norm 16 2, uniform 2 2, uniform 1.7 0],
                [uniform 0 1, uniform 2 2, uniform 1.7 0],
                [norm 18 4, uniform 2 3, uniform 1.7 0],
                [norm 40 2, uniform 2 4, uniform 1.7 0],
                [norm 13 2, uniform 2 2, uniform 1.7 0],
                [uniform 40 20, uniform 2 4, uniform 1.7 0],
              ] 
      
# We discussed being able to attach auxilliary information to a CoFI experiment,
# This all gets passed into the cofi_init() method, but this means the user
# has to specify cofi_init() properly so that it is expecting these arguments
init_info:
  fs0: 25.0
  gauss_a0: 2.5
  water_c0: 0.0001
  true_model: [[8.370596, 3.249075, 1.7],
      [17.23163, 3.001270, 1.7],
      [1.9126695E-02, 2.509443, 1.7],
      [19.78145, 3.562691, 1.7],
      [41.73066, 4.225965, 1.7],
      [14.35261, 2.963322, 1.7],
      [49.92358, 4.586726, 1.7]]

# This is how you tell CoFI how to 'find' thhe forward model. CoFI will look here and
# try to load code at this location, and then call the cofi_init() function
# (once, at the start, before it does anything else) and then multiple
# calls to cofi_misfit() during inversion
fwd_code: &idfwd
  name: rfc
  location: /home/peter/personal/CoFI/user_testing/rfc

# This is where you tell CoFI what inversion method you want to use. 
# At the moment, I have just implemented a super-dumb/simple direct descent method
# just to illustrate how we might interact with CoFI inverters
method:
  # The name of the inverter. This must be something that is packaged with CoFI
  # We can allow users to plug in their own inversion code, but need to work out how 
  # best to do this. 
  name: DumbDescent 
  # Every inverter takes *at least* two mandatory arguments:
  #     * 'model' specifies the structure of the model being inverted (at this stage I
  #       havent thought about how to deal with reversible jump MCMC type models where
  #       the dimension of the model space is itself part of the search space)
  #     * 'forward' links to the forward code to be used in the inversion. This *must*
  #       implement cofi_misfit() and cofi_init() functions.
  #
  # Additional arguments will be specific to the inverter. In this case, the inverter takes
  # 'step' and 'time' arguments, but different inverters will take different arguments,
  # and you would specify them here.
  args:
      model: *idmodel
      forward: *idfwd
      # run for 30 seconds
      time: 5
      # size of step in model search space
      step: 0.2

          

